name: Activity Status

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch: 

permissions:
  contents: write

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Create .env file
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" > .env
          echo "USERNAME=${{ github.repository_owner }}" >> .env
      
      - name: Install dependencies
        run: npm install axios dotenv
      
      - name: Create status script
        run: |
          cat > update-status.js <<'EOF'
          require('dotenv').config();
          const fs = require('fs');
          const axios = require('axios');
          
          const username = process.env.USERNAME;
          const token = process.env.GITHUB_TOKEN;
          
          const CATPPUCCIN_GREEN = "ABE9B3" // Green for online
          const CATPPUCCIN_RED = "F28FAD"   // Red for offline
          
          const LOGO_COLOR = "85e185"
          const LABEL_COLOR = "1c1c29"
          
          async function getLastActivityTime() {
            try {
              const response = await axios.get(
                `https://api.github.com/users/${username}/events`,
                {
                  headers: {
                    Authorization: `token ${token}`,
                    'User-Agent': 'Activity-Status-Updater'
                  }
                }
              );
              
              if (response.data && response.data.length > 0) {
                return new Date(response.data[0].created_at);
              }
              return null;
            } catch (error) {
              console.error('Error fetching GitHub activity:', error.message);
              return null;
            }
          }
          
          async function updateReadmeTemplate() {
            try {
              const lastActivity = await getLastActivityTime();
              const now = new Date();
              const timeDiffMinutes = lastActivity ? 
                Math.floor((now - lastActivity) / (1000 * 60)) : null;
              
              const isOnline = timeDiffMinutes !== null && timeDiffMinutes < 15;
              
              const onlineBadge = `![Status](https://img.shields.io/badge/Status-Online-${CATPPUCCIN_GREEN}?style=for-the-badge&logo=github&logoColor=${LOGO_COLOR}&labelColor=${LABEL_COLOR})`;
              const offlineBadge = `![Status](https://img.shields.io/badge/Status-Offline-${CATPPUCCIN_RED}?style=for-the-badge&logo=github&logoColor=${LOGO_COLOR}&labelColor=${LABEL_COLOR})`;
              const statusBadge = isOnline ? onlineBadge : offlineBadge;
              
              const templatePath = 'README.gtpl';
              if (!fs.existsSync(templatePath)) {
                console.error('README.gtpl not found');
                return;
              }
              
              const template = fs.readFileSync(templatePath, 'utf8');
              
              const badgeSection = template.match(/(<!--Badge\s*-->)([\s\S]*?)(<!-- badge _END -->)/i);
              
              if (badgeSection) {
                const contentBetweenComments = badgeSection[2];
                
                let newContent;
                
                if (contentBetweenComments.includes('![Status]')) {
                  newContent = contentBetweenComments.replace(
                    /!\[Status\]\(https:\/\/img\.shields\.io\/badge\/Status-(?:Online|Offline)-[^?)]+(?:[^)]+)?\)/,
                    statusBadge
                  );
                } else if (contentBetweenComments.includes('the badges should be here')) {
                  newContent = contentBetweenComments.replace(
                    /the badges should be here/,
                    statusBadge
                  );
                } else {
                  // Just insert the badge
                  newContent = statusBadge;
                }
                
                const newSection = `${badgeSection[1]}${newContent}${badgeSection[3]}`;
                
                const newTemplate = template.replace(badgeSection[0], newSection);
                
                fs.writeFileSync(templatePath, newTemplate);
                console.log(`Updated status in README.gtpl to ${isOnline ? 'Online' : 'Offline'}`);
                console.log(`Using custom colors: labelColor=${LABEL_COLOR}, logoColor=${LOGO_COLOR}`);
              } else {
                console.error('Badge markers not found in README.gtpl');
              }
              
              console.log(`Last activity: ${lastActivity ? lastActivity.toISOString() : 'Unknown'}`);
            } catch (error) {
              console.error('Error updating README.gtpl:', error.message);
            }
          }
          
          updateReadmeTemplate();
          EOF
      
      - name: Execute status script
        run: node update-status.js
        
      - name: Debug README.gtpl content
        run: |
          echo "Current README.gtpl content:"
          cat README.gtpl
        
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.gtpl
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update activity status in README template" && git push)
          echo "Changes committed and pushed."
